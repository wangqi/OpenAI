//
//  InputItem.swift
//  OpenAI
//
//  Created by Oleksii Nezhyborets on 11.04.2025.
//

import Foundation
@_spi(Generated) import OpenAPIRuntime

public enum InputItem: Codable, Hashable, Sendable {
    /// A message input to the model with a role indicating instruction following hierarchy. Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role. Messages with the `assistant` role are presumed to have been generated by the model in previous interactions.
    case inputMessage(EasyInputMessage)
    /// An item representing part of the context for the response to be generated by the model. Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
    case item(Components.Schemas.Item)
    /// An internal identifier for an item to reference.
    case itemReference(Components.Schemas.ItemReferenceParam)
    
    public enum CodingKeys: String, CodingKey {
        case _type = "type"
    }
    
    public init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let discriminator = try container.decode(
            Swift.String.self,
            forKey: ._type
        )
        switch discriminator {
        case "EasyInputMessage", "#/components/schemas/EasyInputMessage":
            self = .inputMessage(try .init(from: decoder))
        case "Item", "#/components/schemas/Item":
            self = .item(try .init(from: decoder))
        case "ItemReference", "#/components/schemas/ItemReference":
            self = .itemReference(try .init(from: decoder))
        default:
            throw Swift.DecodingError.unknownOneOfDiscriminator(
                discriminatorKey: CodingKeys._type,
                discriminatorValue: discriminator,
                codingPath: decoder.codingPath
            )
        }
    }
    public func encode(to encoder: any Encoder) throws {
        switch self {
        case let .inputMessage(value):
            try value.encode(to: encoder)
        case let .item(value):
            try value.encode(to: encoder)
        case let .itemReference(value):
            try value.encode(to: encoder)
        }
    }
}
